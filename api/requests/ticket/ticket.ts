/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateManyTicketsIn,
  Error,
  TicketOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create Many
 */
export const PostApiV1Ticket = (
    createManyTicketsIn: BodyType<CreateManyTicketsIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TicketOut[]>(
      {url: `/api/v1/ticket`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createManyTicketsIn
    },
      options);
    }
  


export const getPostApiV1TicketMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Ticket>>, TError,{data: BodyType<CreateManyTicketsIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Ticket>>, TError,{data: BodyType<CreateManyTicketsIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Ticket>>, {data: BodyType<CreateManyTicketsIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Ticket(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1TicketMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Ticket>>>
    export type PostApiV1TicketMutationBody = BodyType<CreateManyTicketsIn>
    export type PostApiV1TicketMutationError = ErrorType<Error>

    /**
 * @summary Create Many
 */
export const usePostApiV1Ticket = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Ticket>>, TError,{data: BodyType<CreateManyTicketsIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Ticket>>,
        TError,
        {data: BodyType<CreateManyTicketsIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1TicketMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get My
 */
export const GetApiV1TicketMy = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TicketOut[]>(
      {url: `/api/v1/ticket/my`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1TicketMyQueryKey = () => {
    return [`/api/v1/ticket/my`] as const;
    }

    
export const getGetApiV1TicketMyQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1TicketMy>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TicketMyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1TicketMy>>> = ({ signal }) => GetApiV1TicketMy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketMy>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TicketMyQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1TicketMy>>>
export type GetApiV1TicketMyQueryError = ErrorType<Error>

/**
 * @summary Get My
 */
export const useGetApiV1TicketMy = <TData = Awaited<ReturnType<typeof GetApiV1TicketMy>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TicketMyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1TicketId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TicketOut>(
      {url: `/api/v1/ticket/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1TicketIdQueryKey = (id: number,) => {
    return [`/api/v1/ticket/${id}`] as const;
    }

    
export const getGetApiV1TicketIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1TicketId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TicketIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1TicketId>>> = ({ signal }) => GetApiV1TicketId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TicketIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1TicketId>>>
export type GetApiV1TicketIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1TicketId = <TData = Awaited<ReturnType<typeof GetApiV1TicketId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TicketIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Close Ticket
 */
export const DeleteApiV1TicketId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TicketOut>(
      {url: `/api/v1/ticket/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1TicketIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1TicketId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1TicketId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1TicketId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1TicketId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1TicketIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1TicketId>>>
    
    export type DeleteApiV1TicketIdMutationError = ErrorType<Error>

    /**
 * @summary Close Ticket
 */
export const useDeleteApiV1TicketId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1TicketId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1TicketId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1TicketIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get By Order Id
 */
export const GetApiV1TicketOrderId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TicketOut[]>(
      {url: `/api/v1/ticket/order/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1TicketOrderIdQueryKey = (id: number,) => {
    return [`/api/v1/ticket/order/${id}`] as const;
    }

    
export const getGetApiV1TicketOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1TicketOrderId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1TicketOrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1TicketOrderId>>> = ({ signal }) => GetApiV1TicketOrderId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketOrderId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1TicketOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1TicketOrderId>>>
export type GetApiV1TicketOrderIdQueryError = ErrorType<Error>

/**
 * @summary Get By Order Id
 */
export const useGetApiV1TicketOrderId = <TData = Awaited<ReturnType<typeof GetApiV1TicketOrderId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1TicketOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1TicketOrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



