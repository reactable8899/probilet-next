/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1SponsorPagedParams,
  PaginatedResponseSchemaSponsorOut,
  SponsorOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1SponsorPaged = (
    params?: GetApiV1SponsorPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaSponsorOut>(
      {url: `/api/v1/sponsor/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1SponsorPagedQueryKey = (params?: GetApiV1SponsorPagedParams,) => {
    return [`/api/v1/sponsor/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SponsorPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SponsorPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1SponsorPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SponsorPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SponsorPaged>>> = ({ signal }) => GetApiV1SponsorPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SponsorPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SponsorPaged>>>
export type GetApiV1SponsorPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1SponsorPaged = <TData = Awaited<ReturnType<typeof GetApiV1SponsorPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1SponsorPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SponsorPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Sponsor = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SponsorOut[]>(
      {url: `/api/v1/sponsor`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SponsorQueryKey = () => {
    return [`/api/v1/sponsor`] as const;
    }

    
export const getGetApiV1SponsorQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Sponsor>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Sponsor>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SponsorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Sponsor>>> = ({ signal }) => GetApiV1Sponsor(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Sponsor>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SponsorQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Sponsor>>>
export type GetApiV1SponsorQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Sponsor = <TData = Awaited<ReturnType<typeof GetApiV1Sponsor>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Sponsor>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SponsorQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Group Id
 */
export const GetApiV1SponsorEventgroupId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SponsorOut[]>(
      {url: `/api/v1/sponsor/event_group/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SponsorEventgroupIdQueryKey = (id: number,) => {
    return [`/api/v1/sponsor/event_group/${id}`] as const;
    }

    
export const getGetApiV1SponsorEventgroupIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SponsorEventgroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>> = ({ signal }) => GetApiV1SponsorEventgroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SponsorEventgroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>>
export type GetApiV1SponsorEventgroupIdQueryError = ErrorType<Error>

/**
 * @summary Get By Event Group Id
 */
export const useGetApiV1SponsorEventgroupId = <TData = Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorEventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SponsorEventgroupIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1SponsorId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SponsorOut>(
      {url: `/api/v1/sponsor/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SponsorIdQueryKey = (id: number,) => {
    return [`/api/v1/sponsor/${id}`] as const;
    }

    
export const getGetApiV1SponsorIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SponsorId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SponsorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SponsorId>>> = ({ signal }) => GetApiV1SponsorId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SponsorIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SponsorId>>>
export type GetApiV1SponsorIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1SponsorId = <TData = Awaited<ReturnType<typeof GetApiV1SponsorId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SponsorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SponsorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



