/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  EventDatesInfoOut,
  EventDetailsOut,
  EventOut,
  EventSectorSoldPlacesOut,
  GetApiV1EventActiveoronsalePagedParams,
  GetApiV1EventActiveoronsaleParams,
  GetApiV1EventEventgroupIdPagedParams,
  GetApiV1EventPagedParams,
  GetApiV1EventRecommendedPagedParams,
  GetApiV1EventRecommendedParams,
  PaginatedResponseSchemaEventDetailsOut,
  PaginatedResponseSchemaEventOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Sold Places
 */
export const GetApiV1EventIdSold = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventSectorSoldPlacesOut[]>(
      {url: `/api/v1/event/${id}/sold`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventIdSoldQueryKey = (id: number,) => {
    return [`/api/v1/event/${id}/sold`] as const;
    }

    
export const getGetApiV1EventIdSoldQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventIdSold>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventIdSold>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventIdSoldQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventIdSold>>> = ({ signal }) => GetApiV1EventIdSold(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventIdSold>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventIdSoldQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventIdSold>>>
export type GetApiV1EventIdSoldQueryError = ErrorType<unknown>

/**
 * @summary Get Sold Places
 */
export const useGetApiV1EventIdSold = <TData = Awaited<ReturnType<typeof GetApiV1EventIdSold>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventIdSold>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventIdSoldQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Recommended Paged
 */
export const GetApiV1EventRecommendedPaged = (
    params?: GetApiV1EventRecommendedPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventDetailsOut>(
      {url: `/api/v1/event/recommended/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventRecommendedPagedQueryKey = (params?: GetApiV1EventRecommendedPagedParams,) => {
    return [`/api/v1/event/recommended/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventRecommendedPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventRecommendedPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventRecommendedPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>> = ({ signal }) => GetApiV1EventRecommendedPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventRecommendedPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>>
export type GetApiV1EventRecommendedPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Recommended Paged
 */
export const useGetApiV1EventRecommendedPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventRecommendedPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommendedPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventRecommendedPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Recommended
 */
export const GetApiV1EventRecommended = (
    params?: GetApiV1EventRecommendedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDetailsOut[]>(
      {url: `/api/v1/event/recommended`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventRecommendedQueryKey = (params?: GetApiV1EventRecommendedParams,) => {
    return [`/api/v1/event/recommended`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventRecommendedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventRecommended>>, TError = ErrorType<unknown>>(params?: GetApiV1EventRecommendedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommended>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventRecommendedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventRecommended>>> = ({ signal }) => GetApiV1EventRecommended(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommended>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventRecommendedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventRecommended>>>
export type GetApiV1EventRecommendedQueryError = ErrorType<unknown>

/**
 * @summary Get Recommended
 */
export const useGetApiV1EventRecommended = <TData = Awaited<ReturnType<typeof GetApiV1EventRecommended>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventRecommendedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventRecommended>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventRecommendedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Active Or On Sale Paged
 */
export const GetApiV1EventActiveoronsalePaged = (
    params?: GetApiV1EventActiveoronsalePagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventDetailsOut>(
      {url: `/api/v1/event/active_or_on_sale/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventActiveoronsalePagedQueryKey = (params?: GetApiV1EventActiveoronsalePagedParams,) => {
    return [`/api/v1/event/active_or_on_sale/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventActiveoronsalePagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventActiveoronsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventActiveoronsalePagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>> = ({ signal }) => GetApiV1EventActiveoronsalePaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventActiveoronsalePagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>>
export type GetApiV1EventActiveoronsalePagedQueryError = ErrorType<unknown>

/**
 * @summary Get Active Or On Sale Paged
 */
export const useGetApiV1EventActiveoronsalePaged = <TData = Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventActiveoronsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventActiveoronsalePagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Active Or On Sale
 */
export const GetApiV1EventActiveoronsale = (
    params?: GetApiV1EventActiveoronsaleParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDetailsOut[]>(
      {url: `/api/v1/event/active_or_on_sale`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventActiveoronsaleQueryKey = (params?: GetApiV1EventActiveoronsaleParams,) => {
    return [`/api/v1/event/active_or_on_sale`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventActiveoronsaleQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>, TError = ErrorType<unknown>>(params?: GetApiV1EventActiveoronsaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventActiveoronsaleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>> = ({ signal }) => GetApiV1EventActiveoronsale(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventActiveoronsaleQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>>
export type GetApiV1EventActiveoronsaleQueryError = ErrorType<unknown>

/**
 * @summary Get Active Or On Sale
 */
export const useGetApiV1EventActiveoronsale = <TData = Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventActiveoronsaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventActiveoronsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventActiveoronsaleQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Calendar
 */
export const GetApiV1EventCalendar = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDatesInfoOut>(
      {url: `/api/v1/event/calendar`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventCalendarQueryKey = () => {
    return [`/api/v1/event/calendar`] as const;
    }

    
export const getGetApiV1EventCalendarQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventCalendar>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventCalendar>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventCalendarQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventCalendar>>> = ({ signal }) => GetApiV1EventCalendar(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventCalendar>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventCalendarQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventCalendar>>>
export type GetApiV1EventCalendarQueryError = ErrorType<unknown>

/**
 * @summary Get Calendar
 */
export const useGetApiV1EventCalendar = <TData = Awaited<ReturnType<typeof GetApiV1EventCalendar>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventCalendar>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventCalendarQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Group Id Paged
 */
export const GetApiV1EventEventgroupIdPaged = (
    id: number,
    params?: GetApiV1EventEventgroupIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventOut>(
      {url: `/api/v1/event/event_group/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventEventgroupIdPagedQueryKey = (id: number,
    params?: GetApiV1EventEventgroupIdPagedParams,) => {
    return [`/api/v1/event/event_group/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventEventgroupIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1EventEventgroupIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventEventgroupIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>> = ({ signal }) => GetApiV1EventEventgroupIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventEventgroupIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>>
export type GetApiV1EventEventgroupIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Event Group Id Paged
 */
export const useGetApiV1EventEventgroupIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1EventEventgroupIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventEventgroupIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Group Id
 */
export const GetApiV1EventEventgroupId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventOut[]>(
      {url: `/api/v1/event/event_group/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventEventgroupIdQueryKey = (id: number,) => {
    return [`/api/v1/event/event_group/${id}`] as const;
    }

    
export const getGetApiV1EventEventgroupIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventEventgroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>> = ({ signal }) => GetApiV1EventEventgroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventEventgroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>>
export type GetApiV1EventEventgroupIdQueryError = ErrorType<Error>

/**
 * @summary Get By Event Group Id
 */
export const useGetApiV1EventEventgroupId = <TData = Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventEventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventEventgroupIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Paged
 */
export const GetApiV1EventPaged = (
    params?: GetApiV1EventPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventDetailsOut>(
      {url: `/api/v1/event/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventPagedQueryKey = (params?: GetApiV1EventPagedParams,) => {
    return [`/api/v1/event/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventPaged>>> = ({ signal }) => GetApiV1EventPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventPaged>>>
export type GetApiV1EventPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1EventPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Event = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDetailsOut[]>(
      {url: `/api/v1/event`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventQueryKey = () => {
    return [`/api/v1/event`] as const;
    }

    
export const getGetApiV1EventQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Event>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Event>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Event>>> = ({ signal }) => GetApiV1Event(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Event>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Event>>>
export type GetApiV1EventQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Event = <TData = Awaited<ReturnType<typeof GetApiV1Event>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Event>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1EventId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDetailsOut>(
      {url: `/api/v1/event/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventIdQueryKey = (id: number,) => {
    return [`/api/v1/event/${id}`] as const;
    }

    
export const getGetApiV1EventIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventId>>> = ({ signal }) => GetApiV1EventId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventId>>>
export type GetApiV1EventIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1EventId = <TData = Awaited<ReturnType<typeof GetApiV1EventId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



