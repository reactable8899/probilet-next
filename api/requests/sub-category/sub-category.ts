/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1SubcategoryCategoryIdPagedParams,
  GetApiV1SubcategoryPagedParams,
  PaginatedResponseSchemaSubCategoryOut,
  SubCategoryOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1SubcategoryPaged = (
    params?: GetApiV1SubcategoryPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaSubCategoryOut>(
      {url: `/api/v1/sub_category/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1SubcategoryPagedQueryKey = (params?: GetApiV1SubcategoryPagedParams,) => {
    return [`/api/v1/sub_category/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SubcategoryPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1SubcategoryPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubcategoryPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>> = ({ signal }) => GetApiV1SubcategoryPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubcategoryPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>>
export type GetApiV1SubcategoryPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1SubcategoryPaged = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1SubcategoryPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SubcategoryPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Subcategory = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubCategoryOut[]>(
      {url: `/api/v1/sub_category`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SubcategoryQueryKey = () => {
    return [`/api/v1/sub_category`] as const;
    }

    
export const getGetApiV1SubcategoryQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Subcategory>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Subcategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubcategoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Subcategory>>> = ({ signal }) => GetApiV1Subcategory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Subcategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubcategoryQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Subcategory>>>
export type GetApiV1SubcategoryQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Subcategory = <TData = Awaited<ReturnType<typeof GetApiV1Subcategory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Subcategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SubcategoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Category Id Paged
 */
export const GetApiV1SubcategoryCategoryIdPaged = (
    id: number,
    params?: GetApiV1SubcategoryCategoryIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaSubCategoryOut>(
      {url: `/api/v1/sub_category/category/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1SubcategoryCategoryIdPagedQueryKey = (id: number,
    params?: GetApiV1SubcategoryCategoryIdPagedParams,) => {
    return [`/api/v1/sub_category/category/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SubcategoryCategoryIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1SubcategoryCategoryIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubcategoryCategoryIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>> = ({ signal }) => GetApiV1SubcategoryCategoryIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubcategoryCategoryIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>>
export type GetApiV1SubcategoryCategoryIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Category Id Paged
 */
export const useGetApiV1SubcategoryCategoryIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1SubcategoryCategoryIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SubcategoryCategoryIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Category Id
 */
export const GetApiV1SubcategoryCategoryId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubCategoryOut[]>(
      {url: `/api/v1/sub_category/category/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SubcategoryCategoryIdQueryKey = (id: number,) => {
    return [`/api/v1/sub_category/category/${id}`] as const;
    }

    
export const getGetApiV1SubcategoryCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubcategoryCategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>> = ({ signal }) => GetApiV1SubcategoryCategoryId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubcategoryCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>>
export type GetApiV1SubcategoryCategoryIdQueryError = ErrorType<Error>

/**
 * @summary Get By Category Id
 */
export const useGetApiV1SubcategoryCategoryId = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryCategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SubcategoryCategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1SubcategoryId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubCategoryOut>(
      {url: `/api/v1/sub_category/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SubcategoryIdQueryKey = (id: number,) => {
    return [`/api/v1/sub_category/${id}`] as const;
    }

    
export const getGetApiV1SubcategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SubcategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SubcategoryId>>> = ({ signal }) => GetApiV1SubcategoryId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SubcategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SubcategoryId>>>
export type GetApiV1SubcategoryIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1SubcategoryId = <TData = Awaited<ReturnType<typeof GetApiV1SubcategoryId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SubcategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SubcategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



