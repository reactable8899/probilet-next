/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DirectorAuthorizeIn,
  DirectorAuthorizeOut,
  DirectorOut,
  Error
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Authorize
 */
export const PostApiV1DirectorAuth = (
    directorAuthorizeIn: BodyType<DirectorAuthorizeIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DirectorAuthorizeOut>(
      {url: `/api/v1/director/auth`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: directorAuthorizeIn
    },
      options);
    }
  


export const getPostApiV1DirectorAuthMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1DirectorAuth>>, TError,{data: BodyType<DirectorAuthorizeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1DirectorAuth>>, TError,{data: BodyType<DirectorAuthorizeIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1DirectorAuth>>, {data: BodyType<DirectorAuthorizeIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1DirectorAuth(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1DirectorAuthMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1DirectorAuth>>>
    export type PostApiV1DirectorAuthMutationBody = BodyType<DirectorAuthorizeIn>
    export type PostApiV1DirectorAuthMutationError = ErrorType<unknown>

    /**
 * @summary Authorize
 */
export const usePostApiV1DirectorAuth = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1DirectorAuth>>, TError,{data: BodyType<DirectorAuthorizeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1DirectorAuth>>,
        TError,
        {data: BodyType<DirectorAuthorizeIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1DirectorAuthMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Profile
 */
export const GetApiV1DirectorProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DirectorOut>(
      {url: `/api/v1/director/profile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1DirectorProfileQueryKey = () => {
    return [`/api/v1/director/profile`] as const;
    }

    
export const getGetApiV1DirectorProfileQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1DirectorProfile>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1DirectorProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1DirectorProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1DirectorProfile>>> = ({ signal }) => GetApiV1DirectorProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1DirectorProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1DirectorProfileQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1DirectorProfile>>>
export type GetApiV1DirectorProfileQueryError = ErrorType<Error>

/**
 * @summary Get Profile
 */
export const useGetApiV1DirectorProfile = <TData = Awaited<ReturnType<typeof GetApiV1DirectorProfile>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1DirectorProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1DirectorProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



