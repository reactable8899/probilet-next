/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CategoryOut,
  Error,
  GetApiV1CategoryPagedParams,
  PaginatedResponseSchemaCategoryOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1CategoryPaged = (
    params?: GetApiV1CategoryPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaCategoryOut>(
      {url: `/api/v1/category/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1CategoryPagedQueryKey = (params?: GetApiV1CategoryPagedParams,) => {
    return [`/api/v1/category/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1CategoryPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1CategoryPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1CategoryPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1CategoryPaged>>> = ({ signal }) => GetApiV1CategoryPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CategoryPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1CategoryPaged>>>
export type GetApiV1CategoryPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1CategoryPaged = <TData = Awaited<ReturnType<typeof GetApiV1CategoryPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1CategoryPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CategoryPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Category = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryOut[]>(
      {url: `/api/v1/category`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CategoryQueryKey = () => {
    return [`/api/v1/category`] as const;
    }

    
export const getGetApiV1CategoryQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Category>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Category>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Category>>> = ({ signal }) => GetApiV1Category(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Category>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CategoryQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Category>>>
export type GetApiV1CategoryQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Category = <TData = Awaited<ReturnType<typeof GetApiV1Category>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Category>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CategoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1CategoryId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryOut>(
      {url: `/api/v1/category/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CategoryIdQueryKey = (id: number,) => {
    return [`/api/v1/category/${id}`] as const;
    }

    
export const getGetApiV1CategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1CategoryId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CategoryIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1CategoryId>>> = ({ signal }) => GetApiV1CategoryId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1CategoryId>>>
export type GetApiV1CategoryIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1CategoryId = <TData = Awaited<ReturnType<typeof GetApiV1CategoryId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CategoryId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CategoryIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



