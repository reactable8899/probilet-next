/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  EventGroupOut,
  GetApiV1EventgroupActiveoronsalePagedParams,
  GetApiV1EventgroupActiveoronsaleParams,
  GetApiV1EventgroupPagedParams,
  GetApiV1EventgroupParams,
  GetApiV1EventgroupRecommendedPagedParams,
  GetApiV1EventgroupRecommendedParams,
  PaginatedResponseSchemaEventGroupOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Recommended Paged
 */
export const GetApiV1EventgroupRecommendedPaged = (
    params?: GetApiV1EventgroupRecommendedPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventGroupOut>(
      {url: `/api/v1/event_group/recommended/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupRecommendedPagedQueryKey = (params?: GetApiV1EventgroupRecommendedPagedParams,) => {
    return [`/api/v1/event_group/recommended/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupRecommendedPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupRecommendedPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupRecommendedPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>> = ({ signal }) => GetApiV1EventgroupRecommendedPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupRecommendedPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>>
export type GetApiV1EventgroupRecommendedPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Recommended Paged
 */
export const useGetApiV1EventgroupRecommendedPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupRecommendedPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommendedPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupRecommendedPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Recommended
 */
export const GetApiV1EventgroupRecommended = (
    params?: GetApiV1EventgroupRecommendedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventGroupOut[]>(
      {url: `/api/v1/event_group/recommended`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupRecommendedQueryKey = (params?: GetApiV1EventgroupRecommendedParams,) => {
    return [`/api/v1/event_group/recommended`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupRecommendedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupRecommendedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupRecommendedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>> = ({ signal }) => GetApiV1EventgroupRecommended(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupRecommendedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>>
export type GetApiV1EventgroupRecommendedQueryError = ErrorType<unknown>

/**
 * @summary Get Recommended
 */
export const useGetApiV1EventgroupRecommended = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupRecommendedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupRecommended>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupRecommendedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Active Or On Sale Paged
 */
export const GetApiV1EventgroupActiveoronsalePaged = (
    params?: GetApiV1EventgroupActiveoronsalePagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventGroupOut>(
      {url: `/api/v1/event_group/active_or_on_sale/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupActiveoronsalePagedQueryKey = (params?: GetApiV1EventgroupActiveoronsalePagedParams,) => {
    return [`/api/v1/event_group/active_or_on_sale/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupActiveoronsalePagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupActiveoronsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupActiveoronsalePagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>> = ({ signal }) => GetApiV1EventgroupActiveoronsalePaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupActiveoronsalePagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>>
export type GetApiV1EventgroupActiveoronsalePagedQueryError = ErrorType<unknown>

/**
 * @summary Get Active Or On Sale Paged
 */
export const useGetApiV1EventgroupActiveoronsalePaged = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupActiveoronsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupActiveoronsalePagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Active Or On Sale
 */
export const GetApiV1EventgroupActiveoronsale = (
    params?: GetApiV1EventgroupActiveoronsaleParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventGroupOut[]>(
      {url: `/api/v1/event_group/active_or_on_sale`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupActiveoronsaleQueryKey = (params?: GetApiV1EventgroupActiveoronsaleParams,) => {
    return [`/api/v1/event_group/active_or_on_sale`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupActiveoronsaleQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupActiveoronsaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupActiveoronsaleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>> = ({ signal }) => GetApiV1EventgroupActiveoronsale(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupActiveoronsaleQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>>
export type GetApiV1EventgroupActiveoronsaleQueryError = ErrorType<unknown>

/**
 * @summary Get Active Or On Sale
 */
export const useGetApiV1EventgroupActiveoronsale = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupActiveoronsaleParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupActiveoronsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupActiveoronsaleQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Paged
 */
export const GetApiV1EventgroupPaged = (
    params?: GetApiV1EventgroupPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventGroupOut>(
      {url: `/api/v1/event_group/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupPagedQueryKey = (params?: GetApiV1EventgroupPagedParams,) => {
    return [`/api/v1/event_group/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>> = ({ signal }) => GetApiV1EventgroupPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>>
export type GetApiV1EventgroupPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1EventgroupPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Eventgroup = (
    params?: GetApiV1EventgroupParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventGroupOut[]>(
      {url: `/api/v1/event_group`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventgroupQueryKey = (params?: GetApiV1EventgroupParams,) => {
    return [`/api/v1/event_group`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventgroupQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Eventgroup>>, TError = ErrorType<unknown>>(params?: GetApiV1EventgroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Eventgroup>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Eventgroup>>> = ({ signal }) => GetApiV1Eventgroup(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Eventgroup>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Eventgroup>>>
export type GetApiV1EventgroupQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Eventgroup = <TData = Awaited<ReturnType<typeof GetApiV1Eventgroup>>, TError = ErrorType<unknown>>(
 params?: GetApiV1EventgroupParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Eventgroup>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1EventgroupId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventGroupOut>(
      {url: `/api/v1/event_group/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventgroupIdQueryKey = (id: number,) => {
    return [`/api/v1/event_group/${id}`] as const;
    }

    
export const getGetApiV1EventgroupIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventgroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventgroupId>>> = ({ signal }) => GetApiV1EventgroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventgroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventgroupId>>>
export type GetApiV1EventgroupIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1EventgroupId = <TData = Awaited<ReturnType<typeof GetApiV1EventgroupId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventgroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventgroupIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



