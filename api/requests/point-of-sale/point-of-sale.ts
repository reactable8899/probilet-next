/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1PointofsalePagedParams,
  PaginatedResponseSchemaPointOfSaleOut,
  PointOfSaleOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1PointofsalePaged = (
    params?: GetApiV1PointofsalePagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaPointOfSaleOut>(
      {url: `/api/v1/point_of_sale/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1PointofsalePagedQueryKey = (params?: GetApiV1PointofsalePagedParams,) => {
    return [`/api/v1/point_of_sale/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1PointofsalePagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>, TError = ErrorType<unknown>>(params?: GetApiV1PointofsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PointofsalePagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>> = ({ signal }) => GetApiV1PointofsalePaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PointofsalePagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>>
export type GetApiV1PointofsalePagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1PointofsalePaged = <TData = Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1PointofsalePagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsalePaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PointofsalePagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Pointofsale = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PointOfSaleOut[]>(
      {url: `/api/v1/point_of_sale`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1PointofsaleQueryKey = () => {
    return [`/api/v1/point_of_sale`] as const;
    }

    
export const getGetApiV1PointofsaleQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Pointofsale>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Pointofsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PointofsaleQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Pointofsale>>> = ({ signal }) => GetApiV1Pointofsale(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Pointofsale>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PointofsaleQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Pointofsale>>>
export type GetApiV1PointofsaleQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Pointofsale = <TData = Awaited<ReturnType<typeof GetApiV1Pointofsale>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Pointofsale>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PointofsaleQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1PointofsaleId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PointOfSaleOut>(
      {url: `/api/v1/point_of_sale/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1PointofsaleIdQueryKey = (id: number,) => {
    return [`/api/v1/point_of_sale/${id}`] as const;
    }

    
export const getGetApiV1PointofsaleIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1PointofsaleId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsaleId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PointofsaleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1PointofsaleId>>> = ({ signal }) => GetApiV1PointofsaleId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsaleId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PointofsaleIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1PointofsaleId>>>
export type GetApiV1PointofsaleIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1PointofsaleId = <TData = Awaited<ReturnType<typeof GetApiV1PointofsaleId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PointofsaleId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PointofsaleIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



