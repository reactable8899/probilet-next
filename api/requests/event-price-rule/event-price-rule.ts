/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  EventPriceRuleIn,
  EventPriceRuleOut,
  GetApiV1EventpriceruleEventIdPagedParams,
  PaginatedResponseSchemaEventPriceRuleOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get By Event Id Paged
 */
export const GetApiV1EventpriceruleEventIdPaged = (
    id: number,
    params?: GetApiV1EventpriceruleEventIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventPriceRuleOut>(
      {url: `/api/v1/event_price_rule/event/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventpriceruleEventIdPagedQueryKey = (id: number,
    params?: GetApiV1EventpriceruleEventIdPagedParams,) => {
    return [`/api/v1/event_price_rule/event/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventpriceruleEventIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1EventpriceruleEventIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventpriceruleEventIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>> = ({ signal }) => GetApiV1EventpriceruleEventIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventpriceruleEventIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>>
export type GetApiV1EventpriceruleEventIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Event Id Paged
 */
export const useGetApiV1EventpriceruleEventIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1EventpriceruleEventIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventpriceruleEventIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Id
 */
export const GetApiV1EventpriceruleEventId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventPriceRuleOut[]>(
      {url: `/api/v1/event_price_rule/event/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventpriceruleEventIdQueryKey = (id: number,) => {
    return [`/api/v1/event_price_rule/event/${id}`] as const;
    }

    
export const getGetApiV1EventpriceruleEventIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventpriceruleEventIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>> = ({ signal }) => GetApiV1EventpriceruleEventId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventpriceruleEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>>
export type GetApiV1EventpriceruleEventIdQueryError = ErrorType<Error>

/**
 * @summary Get By Event Id
 */
export const useGetApiV1EventpriceruleEventId = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleEventId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventpriceruleEventIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1EventpriceruleId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventPriceRuleOut>(
      {url: `/api/v1/event_price_rule/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventpriceruleIdQueryKey = (id: number,) => {
    return [`/api/v1/event_price_rule/${id}`] as const;
    }

    
export const getGetApiV1EventpriceruleIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventpriceruleIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>> = ({ signal }) => GetApiV1EventpriceruleId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventpriceruleIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>>
export type GetApiV1EventpriceruleIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1EventpriceruleId = <TData = Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventpriceruleId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventpriceruleIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const PutApiV1EventpriceruleId = (
    id: number,
    eventPriceRuleIn: BodyType<EventPriceRuleIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventPriceRuleOut>(
      {url: `/api/v1/event_price_rule/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventPriceRuleIn
    },
      options);
    }
  


export const getPutApiV1EventpriceruleIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>, TError,{id: number;data: BodyType<EventPriceRuleIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>, TError,{id: number;data: BodyType<EventPriceRuleIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>, {id: number;data: BodyType<EventPriceRuleIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PutApiV1EventpriceruleId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1EventpriceruleIdMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>>
    export type PutApiV1EventpriceruleIdMutationBody = BodyType<EventPriceRuleIn>
    export type PutApiV1EventpriceruleIdMutationError = ErrorType<Error>

    /**
 * @summary Update
 */
export const usePutApiV1EventpriceruleId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>, TError,{id: number;data: BodyType<EventPriceRuleIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1EventpriceruleId>>,
        TError,
        {id: number;data: BodyType<EventPriceRuleIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1EventpriceruleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1EventpriceruleId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventPriceRuleOut>(
      {url: `/api/v1/event_price_rule/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1EventpriceruleIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1EventpriceruleId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1EventpriceruleIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>>
    
    export type DeleteApiV1EventpriceruleIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1EventpriceruleId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1EventpriceruleId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1EventpriceruleIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create
 */
export const PostApiV1Eventpricerule = (
    eventPriceRuleIn: BodyType<EventPriceRuleIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventPriceRuleOut>(
      {url: `/api/v1/event_price_rule`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventPriceRuleIn
    },
      options);
    }
  


export const getPostApiV1EventpriceruleMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventpricerule>>, TError,{data: BodyType<EventPriceRuleIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventpricerule>>, TError,{data: BodyType<EventPriceRuleIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Eventpricerule>>, {data: BodyType<EventPriceRuleIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Eventpricerule(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1EventpriceruleMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Eventpricerule>>>
    export type PostApiV1EventpriceruleMutationBody = BodyType<EventPriceRuleIn>
    export type PostApiV1EventpriceruleMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Eventpricerule = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventpricerule>>, TError,{data: BodyType<EventPriceRuleIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Eventpricerule>>,
        TError,
        {data: BodyType<EventPriceRuleIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1EventpriceruleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    