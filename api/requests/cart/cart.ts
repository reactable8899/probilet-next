/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CartCountOut,
  CartOut,
  Error
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get My
 */
export const GetApiV1CartMy = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartOut[]>(
      {url: `/api/v1/cart/my`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CartMyQueryKey = () => {
    return [`/api/v1/cart/my`] as const;
    }

    
export const getGetApiV1CartMyQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1CartMy>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CartMyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1CartMy>>> = ({ signal }) => GetApiV1CartMy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMy>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CartMyQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1CartMy>>>
export type GetApiV1CartMyQueryError = ErrorType<Error>

/**
 * @summary Get My
 */
export const useGetApiV1CartMy = <TData = Awaited<ReturnType<typeof GetApiV1CartMy>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CartMyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get My Count
 */
export const GetApiV1CartMyCount = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartCountOut>(
      {url: `/api/v1/cart/my/count`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CartMyCountQueryKey = () => {
    return [`/api/v1/cart/my/count`] as const;
    }

    
export const getGetApiV1CartMyCountQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1CartMyCount>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMyCount>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CartMyCountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1CartMyCount>>> = ({ signal }) => GetApiV1CartMyCount(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMyCount>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CartMyCountQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1CartMyCount>>>
export type GetApiV1CartMyCountQueryError = ErrorType<Error>

/**
 * @summary Get My Count
 */
export const useGetApiV1CartMyCount = <TData = Awaited<ReturnType<typeof GetApiV1CartMyCount>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CartMyCount>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CartMyCountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete All
 */
export const DeleteApiV1CartAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/cart/all`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1CartAllMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartAll>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartAll>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1CartAll>>, void> = () => {
          

          return  DeleteApiV1CartAll(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CartAllMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1CartAll>>>
    
    export type DeleteApiV1CartAllMutationError = ErrorType<Error>

    /**
 * @summary Delete All
 */
export const useDeleteApiV1CartAll = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartAll>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1CartAll>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CartAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1CartId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CartOut>(
      {url: `/api/v1/cart/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1CartIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1CartId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1CartId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CartIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1CartId>>>
    
    export type DeleteApiV1CartIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1CartId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CartId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1CartId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CartIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    