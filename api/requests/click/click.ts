/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  CompleteIn,
  CompleteOut,
  PrepareIn,
  PrepareOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Prepare
 */
export const PostApiV1ClickPrepare = (
    prepareIn: BodyType<PrepareIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PrepareOut>(
      {url: `/api/v1/click/prepare`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: prepareIn
    },
      options);
    }
  


export const getPostApiV1ClickPrepareMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickPrepare>>, TError,{data: BodyType<PrepareIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickPrepare>>, TError,{data: BodyType<PrepareIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1ClickPrepare>>, {data: BodyType<PrepareIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1ClickPrepare(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClickPrepareMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1ClickPrepare>>>
    export type PostApiV1ClickPrepareMutationBody = BodyType<PrepareIn>
    export type PostApiV1ClickPrepareMutationError = ErrorType<unknown>

    /**
 * @summary Prepare
 */
export const usePostApiV1ClickPrepare = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickPrepare>>, TError,{data: BodyType<PrepareIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1ClickPrepare>>,
        TError,
        {data: BodyType<PrepareIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1ClickPrepareMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Complete
 */
export const PostApiV1ClickComplete = (
    completeIn: BodyType<CompleteIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CompleteOut>(
      {url: `/api/v1/click/complete`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: completeIn
    },
      options);
    }
  


export const getPostApiV1ClickCompleteMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickComplete>>, TError,{data: BodyType<CompleteIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickComplete>>, TError,{data: BodyType<CompleteIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1ClickComplete>>, {data: BodyType<CompleteIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1ClickComplete(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1ClickCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1ClickComplete>>>
    export type PostApiV1ClickCompleteMutationBody = BodyType<CompleteIn>
    export type PostApiV1ClickCompleteMutationError = ErrorType<unknown>

    /**
 * @summary Complete
 */
export const usePostApiV1ClickComplete = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1ClickComplete>>, TError,{data: BodyType<CompleteIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1ClickComplete>>,
        TError,
        {data: BodyType<CompleteIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1ClickCompleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    