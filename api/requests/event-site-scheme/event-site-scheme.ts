/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  EventSiteSchemeIn,
  EventSiteSchemeOut,
  GetApiV1EventsiteschemeEventsiteIdPagedParams,
  PaginatedResponseSchemaEventSiteSchemeOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get By Event Site Id Paged
 */
export const GetApiV1EventsiteschemeEventsiteIdPaged = (
    id: number,
    params?: GetApiV1EventsiteschemeEventsiteIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaEventSiteSchemeOut>(
      {url: `/api/v1/event_site_scheme/event_site/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1EventsiteschemeEventsiteIdPagedQueryKey = (id: number,
    params?: GetApiV1EventsiteschemeEventsiteIdPagedParams,) => {
    return [`/api/v1/event_site_scheme/event_site/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1EventsiteschemeEventsiteIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1EventsiteschemeEventsiteIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventsiteschemeEventsiteIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>> = ({ signal }) => GetApiV1EventsiteschemeEventsiteIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventsiteschemeEventsiteIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>>
export type GetApiV1EventsiteschemeEventsiteIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Event Site Id Paged
 */
export const useGetApiV1EventsiteschemeEventsiteIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1EventsiteschemeEventsiteIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventsiteschemeEventsiteIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Site Id
 */
export const GetApiV1EventsiteschemeEventsiteId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventSiteSchemeOut[]>(
      {url: `/api/v1/event_site_scheme/event_site/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventsiteschemeEventsiteIdQueryKey = (id: number,) => {
    return [`/api/v1/event_site_scheme/event_site/${id}`] as const;
    }

    
export const getGetApiV1EventsiteschemeEventsiteIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventsiteschemeEventsiteIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>> = ({ signal }) => GetApiV1EventsiteschemeEventsiteId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventsiteschemeEventsiteIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>>
export type GetApiV1EventsiteschemeEventsiteIdQueryError = ErrorType<Error>

/**
 * @summary Get By Event Site Id
 */
export const useGetApiV1EventsiteschemeEventsiteId = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeEventsiteId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventsiteschemeEventsiteIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1EventsiteschemeId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventSiteSchemeOut>(
      {url: `/api/v1/event_site_scheme/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1EventsiteschemeIdQueryKey = (id: number,) => {
    return [`/api/v1/event_site_scheme/${id}`] as const;
    }

    
export const getGetApiV1EventsiteschemeIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1EventsiteschemeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>> = ({ signal }) => GetApiV1EventsiteschemeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1EventsiteschemeIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>>
export type GetApiV1EventsiteschemeIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1EventsiteschemeId = <TData = Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1EventsiteschemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1EventsiteschemeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const PutApiV1EventsiteschemeId = (
    id: number,
    eventSiteSchemeIn: BodyType<EventSiteSchemeIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventSiteSchemeOut>(
      {url: `/api/v1/event_site_scheme/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventSiteSchemeIn
    },
      options);
    }
  


export const getPutApiV1EventsiteschemeIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>, TError,{id: number;data: BodyType<EventSiteSchemeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>, TError,{id: number;data: BodyType<EventSiteSchemeIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>, {id: number;data: BodyType<EventSiteSchemeIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PutApiV1EventsiteschemeId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1EventsiteschemeIdMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>>
    export type PutApiV1EventsiteschemeIdMutationBody = BodyType<EventSiteSchemeIn>
    export type PutApiV1EventsiteschemeIdMutationError = ErrorType<Error>

    /**
 * @summary Update
 */
export const usePutApiV1EventsiteschemeId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>, TError,{id: number;data: BodyType<EventSiteSchemeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1EventsiteschemeId>>,
        TError,
        {id: number;data: BodyType<EventSiteSchemeIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1EventsiteschemeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1EventsiteschemeId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventSiteSchemeOut>(
      {url: `/api/v1/event_site_scheme/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1EventsiteschemeIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1EventsiteschemeId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1EventsiteschemeIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>>
    
    export type DeleteApiV1EventsiteschemeIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1EventsiteschemeId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1EventsiteschemeId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1EventsiteschemeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create
 */
export const PostApiV1Eventsitescheme = (
    eventSiteSchemeIn: BodyType<EventSiteSchemeIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EventSiteSchemeOut>(
      {url: `/api/v1/event_site_scheme`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventSiteSchemeIn
    },
      options);
    }
  


export const getPostApiV1EventsiteschemeMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>, TError,{data: BodyType<EventSiteSchemeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>, TError,{data: BodyType<EventSiteSchemeIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>, {data: BodyType<EventSiteSchemeIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Eventsitescheme(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1EventsiteschemeMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>>
    export type PostApiV1EventsiteschemeMutationBody = BodyType<EventSiteSchemeIn>
    export type PostApiV1EventsiteschemeMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Eventsitescheme = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>, TError,{data: BodyType<EventSiteSchemeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Eventsitescheme>>,
        TError,
        {data: BodyType<EventSiteSchemeIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1EventsiteschemeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    