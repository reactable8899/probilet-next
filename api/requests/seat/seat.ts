/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  SeatIn,
  SeatOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create
 */
export const PostApiV1Seat = (
    seatIn: BodyType<SeatIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SeatOut>(
      {url: `/api/v1/seat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: seatIn
    },
      options);
    }
  


export const getPostApiV1SeatMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Seat>>, TError,{data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Seat>>, TError,{data: BodyType<SeatIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Seat>>, {data: BodyType<SeatIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Seat(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SeatMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Seat>>>
    export type PostApiV1SeatMutationBody = BodyType<SeatIn>
    export type PostApiV1SeatMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Seat = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Seat>>, TError,{data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Seat>>,
        TError,
        {data: BodyType<SeatIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1SeatMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get All
 */
export const GetApiV1Seat = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SeatOut[]>(
      {url: `/api/v1/seat`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SeatQueryKey = () => {
    return [`/api/v1/seat`] as const;
    }

    
export const getGetApiV1SeatQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Seat>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Seat>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SeatQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Seat>>> = ({ signal }) => GetApiV1Seat(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Seat>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SeatQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Seat>>>
export type GetApiV1SeatQueryError = ErrorType<Error>

/**
 * @summary Get All
 */
export const useGetApiV1Seat = <TData = Awaited<ReturnType<typeof GetApiV1Seat>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Seat>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SeatQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1SeatId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SeatOut>(
      {url: `/api/v1/seat/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SeatIdQueryKey = (id: number,) => {
    return [`/api/v1/seat/${id}`] as const;
    }

    
export const getGetApiV1SeatIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SeatId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SeatIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SeatId>>> = ({ signal }) => GetApiV1SeatId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SeatIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SeatId>>>
export type GetApiV1SeatIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1SeatId = <TData = Awaited<ReturnType<typeof GetApiV1SeatId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SeatIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const PutApiV1SeatId = (
    id: number,
    seatIn: BodyType<SeatIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SeatOut>(
      {url: `/api/v1/seat/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: seatIn
    },
      options);
    }
  


export const getPutApiV1SeatIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1SeatId>>, {id: number;data: BodyType<SeatIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PutApiV1SeatId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1SeatIdMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1SeatId>>>
    export type PutApiV1SeatIdMutationBody = BodyType<SeatIn>
    export type PutApiV1SeatIdMutationError = ErrorType<Error>

    /**
 * @summary Update
 */
export const usePutApiV1SeatId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1SeatId>>,
        TError,
        {id: number;data: BodyType<SeatIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1SeatIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update Partial
 */
export const PatchApiV1SeatId = (
    id: number,
    seatIn: BodyType<SeatIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SeatOut>(
      {url: `/api/v1/seat/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: seatIn
    },
      options);
    }
  


export const getPatchApiV1SeatIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PatchApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PatchApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PatchApiV1SeatId>>, {id: number;data: BodyType<SeatIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PatchApiV1SeatId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiV1SeatIdMutationResult = NonNullable<Awaited<ReturnType<typeof PatchApiV1SeatId>>>
    export type PatchApiV1SeatIdMutationBody = BodyType<SeatIn>
    export type PatchApiV1SeatIdMutationError = ErrorType<Error>

    /**
 * @summary Update Partial
 */
export const usePatchApiV1SeatId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PatchApiV1SeatId>>, TError,{id: number;data: BodyType<SeatIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PatchApiV1SeatId>>,
        TError,
        {id: number;data: BodyType<SeatIn>},
        TContext
      > => {

      const mutationOptions = getPatchApiV1SeatIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1SeatId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SeatOut>(
      {url: `/api/v1/seat/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1SeatIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SeatId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SeatId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1SeatId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1SeatId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1SeatIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1SeatId>>>
    
    export type DeleteApiV1SeatIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1SeatId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SeatId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1SeatId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1SeatIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get By Sector Id
 */
export const GetApiV1SeatSectorId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SeatOut[]>(
      {url: `/api/v1/seat/sector/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SeatSectorIdQueryKey = (id: number,) => {
    return [`/api/v1/seat/sector/${id}`] as const;
    }

    
export const getGetApiV1SeatSectorIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SeatSectorId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatSectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SeatSectorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SeatSectorId>>> = ({ signal }) => GetApiV1SeatSectorId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatSectorId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SeatSectorIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SeatSectorId>>>
export type GetApiV1SeatSectorIdQueryError = ErrorType<Error>

/**
 * @summary Get By Sector Id
 */
export const useGetApiV1SeatSectorId = <TData = Awaited<ReturnType<typeof GetApiV1SeatSectorId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SeatSectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SeatSectorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



