/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1PaymentmethodPagedParams,
  PaginatedResponseSchemaPaymentMethodOut,
  PaymentMethodOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1PaymentmethodPaged = (
    params?: GetApiV1PaymentmethodPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaPaymentMethodOut>(
      {url: `/api/v1/payment_method/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1PaymentmethodPagedQueryKey = (params?: GetApiV1PaymentmethodPagedParams,) => {
    return [`/api/v1/payment_method/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1PaymentmethodPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1PaymentmethodPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PaymentmethodPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>> = ({ signal }) => GetApiV1PaymentmethodPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PaymentmethodPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>>
export type GetApiV1PaymentmethodPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1PaymentmethodPaged = <TData = Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1PaymentmethodPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PaymentmethodPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1Paymentmethod = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentMethodOut[]>(
      {url: `/api/v1/payment_method`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1PaymentmethodQueryKey = () => {
    return [`/api/v1/payment_method`] as const;
    }

    
export const getGetApiV1PaymentmethodQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1Paymentmethod>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Paymentmethod>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PaymentmethodQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1Paymentmethod>>> = ({ signal }) => GetApiV1Paymentmethod(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Paymentmethod>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PaymentmethodQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1Paymentmethod>>>
export type GetApiV1PaymentmethodQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1Paymentmethod = <TData = Awaited<ReturnType<typeof GetApiV1Paymentmethod>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1Paymentmethod>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PaymentmethodQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1PaymentmethodId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentMethodOut>(
      {url: `/api/v1/payment_method/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1PaymentmethodIdQueryKey = (id: number,) => {
    return [`/api/v1/payment_method/${id}`] as const;
    }

    
export const getGetApiV1PaymentmethodIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1PaymentmethodIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>> = ({ signal }) => GetApiV1PaymentmethodId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1PaymentmethodIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>>
export type GetApiV1PaymentmethodIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1PaymentmethodId = <TData = Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1PaymentmethodId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1PaymentmethodIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



