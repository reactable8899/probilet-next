/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1SectorEventsiteschemeIdPagedParams,
  PaginatedResponseSchemaSectorOut,
  SectorDeleteOut,
  SectorIn,
  SectorOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get By Event Site Scheme Id Paged
 */
export const GetApiV1SectorEventsiteschemeIdPaged = (
    id: number,
    params?: GetApiV1SectorEventsiteschemeIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaSectorOut>(
      {url: `/api/v1/sector/event_site_scheme/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1SectorEventsiteschemeIdPagedQueryKey = (id: number,
    params?: GetApiV1SectorEventsiteschemeIdPagedParams,) => {
    return [`/api/v1/sector/event_site_scheme/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SectorEventsiteschemeIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1SectorEventsiteschemeIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorEventsiteschemeIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>> = ({ signal }) => GetApiV1SectorEventsiteschemeIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorEventsiteschemeIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>>
export type GetApiV1SectorEventsiteschemeIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Event Site Scheme Id Paged
 */
export const useGetApiV1SectorEventsiteschemeIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1SectorEventsiteschemeIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorEventsiteschemeIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Event Site Scheme Id
 */
export const GetApiV1SectorEventsiteschemeId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SectorOut[]>(
      {url: `/api/v1/sector/event_site_scheme/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SectorEventsiteschemeIdQueryKey = (id: number,) => {
    return [`/api/v1/sector/event_site_scheme/${id}`] as const;
    }

    
export const getGetApiV1SectorEventsiteschemeIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorEventsiteschemeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>> = ({ signal }) => GetApiV1SectorEventsiteschemeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorEventsiteschemeIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>>
export type GetApiV1SectorEventsiteschemeIdQueryError = ErrorType<Error>

/**
 * @summary Get By Event Site Scheme Id
 */
export const useGetApiV1SectorEventsiteschemeId = <TData = Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorEventsiteschemeId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorEventsiteschemeIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1SectorId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SectorOut>(
      {url: `/api/v1/sector/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SectorIdQueryKey = (id: number,) => {
    return [`/api/v1/sector/${id}`] as const;
    }

    
export const getGetApiV1SectorIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorId>>> = ({ signal }) => GetApiV1SectorId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorId>>>
export type GetApiV1SectorIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1SectorId = <TData = Awaited<ReturnType<typeof GetApiV1SectorId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const PutApiV1SectorId = (
    id: number,
    sectorIn: BodyType<SectorIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorOut>(
      {url: `/api/v1/sector/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sectorIn
    },
      options);
    }
  


export const getPutApiV1SectorIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorId>>, TError,{id: number;data: BodyType<SectorIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorId>>, TError,{id: number;data: BodyType<SectorIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1SectorId>>, {id: number;data: BodyType<SectorIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PutApiV1SectorId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1SectorIdMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1SectorId>>>
    export type PutApiV1SectorIdMutationBody = BodyType<SectorIn>
    export type PutApiV1SectorIdMutationError = ErrorType<Error>

    /**
 * @summary Update
 */
export const usePutApiV1SectorId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorId>>, TError,{id: number;data: BodyType<SectorIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1SectorId>>,
        TError,
        {id: number;data: BodyType<SectorIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1SectorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1SectorId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorDeleteOut>(
      {url: `/api/v1/sector/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1SectorIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1SectorId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1SectorId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1SectorIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1SectorId>>>
    
    export type DeleteApiV1SectorIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1SectorId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1SectorId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1SectorIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create
 */
export const PostApiV1Sector = (
    sectorIn: BodyType<SectorIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorOut>(
      {url: `/api/v1/sector`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sectorIn
    },
      options);
    }
  


export const getPostApiV1SectorMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sector>>, TError,{data: BodyType<SectorIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sector>>, TError,{data: BodyType<SectorIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Sector>>, {data: BodyType<SectorIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Sector(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SectorMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Sector>>>
    export type PostApiV1SectorMutationBody = BodyType<SectorIn>
    export type PostApiV1SectorMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Sector = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sector>>, TError,{data: BodyType<SectorIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Sector>>,
        TError,
        {data: BodyType<SectorIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1SectorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    