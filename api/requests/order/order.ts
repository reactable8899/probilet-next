/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateOrderIn,
  Error,
  GetApiV1OrderMyPagedParams,
  OrderOut,
  PaginatedResponseSchemaOrderOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create
 */
export const PostApiV1Order = (
    createOrderIn: BodyType<CreateOrderIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OrderOut>(
      {url: `/api/v1/order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderIn
    },
      options);
    }
  


export const getPostApiV1OrderMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Order>>, TError,{data: BodyType<CreateOrderIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Order>>, TError,{data: BodyType<CreateOrderIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Order>>, {data: BodyType<CreateOrderIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Order(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1OrderMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Order>>>
    export type PostApiV1OrderMutationBody = BodyType<CreateOrderIn>
    export type PostApiV1OrderMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Order = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Order>>, TError,{data: BodyType<CreateOrderIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Order>>,
        TError,
        {data: BodyType<CreateOrderIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1OrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get My Paged
 */
export const GetApiV1OrderMyPaged = (
    params?: GetApiV1OrderMyPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaOrderOut>(
      {url: `/api/v1/order/my/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1OrderMyPagedQueryKey = (params?: GetApiV1OrderMyPagedParams,) => {
    return [`/api/v1/order/my/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1OrderMyPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>, TError = ErrorType<Error>>(params?: GetApiV1OrderMyPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderMyPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>> = ({ signal }) => GetApiV1OrderMyPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1OrderMyPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>>
export type GetApiV1OrderMyPagedQueryError = ErrorType<Error>

/**
 * @summary Get My Paged
 */
export const useGetApiV1OrderMyPaged = <TData = Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>, TError = ErrorType<Error>>(
 params?: GetApiV1OrderMyPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMyPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1OrderMyPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get My
 */
export const GetApiV1OrderMy = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderOut[]>(
      {url: `/api/v1/order/my`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1OrderMyQueryKey = () => {
    return [`/api/v1/order/my`] as const;
    }

    
export const getGetApiV1OrderMyQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1OrderMy>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderMyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1OrderMy>>> = ({ signal }) => GetApiV1OrderMy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMy>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1OrderMyQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1OrderMy>>>
export type GetApiV1OrderMyQueryError = ErrorType<Error>

/**
 * @summary Get My
 */
export const useGetApiV1OrderMy = <TData = Awaited<ReturnType<typeof GetApiV1OrderMy>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1OrderMyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1OrderId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderOut>(
      {url: `/api/v1/order/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1OrderIdQueryKey = (id: number,) => {
    return [`/api/v1/order/${id}`] as const;
    }

    
export const getGetApiV1OrderIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1OrderId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1OrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1OrderId>>> = ({ signal }) => GetApiV1OrderId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1OrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1OrderId>>>
export type GetApiV1OrderIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1OrderId = <TData = Awaited<ReturnType<typeof GetApiV1OrderId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1OrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1OrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



