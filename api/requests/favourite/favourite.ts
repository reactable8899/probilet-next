/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  FavouriteIn,
  FavouriteOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create
 */
export const PostApiV1Favourite = (
    favouriteIn: BodyType<FavouriteIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<FavouriteOut>(
      {url: `/api/v1/favourite`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: favouriteIn
    },
      options);
    }
  


export const getPostApiV1FavouriteMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Favourite>>, TError,{data: BodyType<FavouriteIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Favourite>>, TError,{data: BodyType<FavouriteIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Favourite>>, {data: BodyType<FavouriteIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Favourite(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1FavouriteMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Favourite>>>
    export type PostApiV1FavouriteMutationBody = BodyType<FavouriteIn>
    export type PostApiV1FavouriteMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Favourite = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Favourite>>, TError,{data: BodyType<FavouriteIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Favourite>>,
        TError,
        {data: BodyType<FavouriteIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1FavouriteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get My
 */
export const GetApiV1FavouriteMy = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteOut[]>(
      {url: `/api/v1/favourite/my`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1FavouriteMyQueryKey = () => {
    return [`/api/v1/favourite/my`] as const;
    }

    
export const getGetApiV1FavouriteMyQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1FavouriteMy>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1FavouriteMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1FavouriteMyQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1FavouriteMy>>> = ({ signal }) => GetApiV1FavouriteMy(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1FavouriteMy>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1FavouriteMyQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1FavouriteMy>>>
export type GetApiV1FavouriteMyQueryError = ErrorType<Error>

/**
 * @summary Get My
 */
export const useGetApiV1FavouriteMy = <TData = Awaited<ReturnType<typeof GetApiV1FavouriteMy>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1FavouriteMy>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1FavouriteMyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete All
 */
export const DeleteApiV1FavouriteAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/v1/favourite/all`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1FavouriteAllMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>, void> = () => {
          

          return  DeleteApiV1FavouriteAll(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1FavouriteAllMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>>
    
    export type DeleteApiV1FavouriteAllMutationError = ErrorType<Error>

    /**
 * @summary Delete All
 */
export const useDeleteApiV1FavouriteAll = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1FavouriteAll>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiV1FavouriteAllMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete By Event Group
 */
export const DeleteApiV1FavouriteEventgroupId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<FavouriteOut>(
      {url: `/api/v1/favourite/event_group/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1FavouriteEventgroupIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1FavouriteEventgroupId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1FavouriteEventgroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>>
    
    export type DeleteApiV1FavouriteEventgroupIdMutationError = ErrorType<Error>

    /**
 * @summary Delete By Event Group
 */
export const useDeleteApiV1FavouriteEventgroupId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1FavouriteEventgroupId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1FavouriteEventgroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1FavouriteId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<FavouriteOut>(
      {url: `/api/v1/favourite/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1FavouriteIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1FavouriteId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1FavouriteIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>>
    
    export type DeleteApiV1FavouriteIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1FavouriteId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1FavouriteId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1FavouriteIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    