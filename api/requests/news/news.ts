/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1NewsPagedParams,
  NewsOut,
  PaginatedResponseSchemaNewsOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Paged
 */
export const GetApiV1NewsPaged = (
    params?: GetApiV1NewsPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaNewsOut>(
      {url: `/api/v1/news/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1NewsPagedQueryKey = (params?: GetApiV1NewsPagedParams,) => {
    return [`/api/v1/news/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1NewsPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1NewsPaged>>, TError = ErrorType<unknown>>(params?: GetApiV1NewsPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1NewsPagedQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1NewsPaged>>> = ({ signal }) => GetApiV1NewsPaged(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1NewsPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1NewsPaged>>>
export type GetApiV1NewsPagedQueryError = ErrorType<unknown>

/**
 * @summary Get Paged
 */
export const useGetApiV1NewsPaged = <TData = Awaited<ReturnType<typeof GetApiV1NewsPaged>>, TError = ErrorType<unknown>>(
 params?: GetApiV1NewsPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1NewsPagedQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get All
 */
export const GetApiV1News = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<NewsOut[]>(
      {url: `/api/v1/news`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1NewsQueryKey = () => {
    return [`/api/v1/news`] as const;
    }

    
export const getGetApiV1NewsQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1News>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1News>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1NewsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1News>>> = ({ signal }) => GetApiV1News(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1News>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1NewsQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1News>>>
export type GetApiV1NewsQueryError = ErrorType<unknown>

/**
 * @summary Get All
 */
export const useGetApiV1News = <TData = Awaited<ReturnType<typeof GetApiV1News>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1News>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1NewsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1NewsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<NewsOut>(
      {url: `/api/v1/news/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1NewsIdQueryKey = (id: number,) => {
    return [`/api/v1/news/${id}`] as const;
    }

    
export const getGetApiV1NewsIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1NewsId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1NewsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1NewsId>>> = ({ signal }) => GetApiV1NewsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1NewsIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1NewsId>>>
export type GetApiV1NewsIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1NewsId = <TData = Awaited<ReturnType<typeof GetApiV1NewsId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1NewsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1NewsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



