/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CustomerActivateIn,
  CustomerActivateOut,
  CustomerDeleteOut,
  CustomerEmailActivateIn,
  CustomerEmailActivateOut,
  CustomerEmailGenerateCodeIn,
  CustomerEmailGenerateCodeOut,
  CustomerGenerateCodeIn,
  CustomerGenerateCodeOut,
  CustomerOut,
  CustomerRegisterIn,
  CustomerRegisterOut,
  CustomerUpdateProfileIn,
  DeleteApiV1CustomerUnregisterParams,
  Error
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Register
 */
export const PostApiV1CustomerRegister = (
    customerRegisterIn: BodyType<CustomerRegisterIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerRegisterOut>(
      {url: `/api/v1/customer/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerRegisterIn
    },
      options);
    }
  


export const getPostApiV1CustomerRegisterMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerRegister>>, TError,{data: BodyType<CustomerRegisterIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerRegister>>, TError,{data: BodyType<CustomerRegisterIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1CustomerRegister>>, {data: BodyType<CustomerRegisterIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1CustomerRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CustomerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1CustomerRegister>>>
    export type PostApiV1CustomerRegisterMutationBody = BodyType<CustomerRegisterIn>
    export type PostApiV1CustomerRegisterMutationError = ErrorType<Error>

    /**
 * @summary Register
 */
export const usePostApiV1CustomerRegister = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerRegister>>, TError,{data: BodyType<CustomerRegisterIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1CustomerRegister>>,
        TError,
        {data: BodyType<CustomerRegisterIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1CustomerRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Generate Email Code
 */
export const PostApiV1CustomerEmailGeneratecode = (
    customerEmailGenerateCodeIn: BodyType<CustomerEmailGenerateCodeIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerEmailGenerateCodeOut>(
      {url: `/api/v1/customer/email/generate_code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerEmailGenerateCodeIn
    },
      options);
    }
  


export const getPostApiV1CustomerEmailGeneratecodeMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>, TError,{data: BodyType<CustomerEmailGenerateCodeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>, TError,{data: BodyType<CustomerEmailGenerateCodeIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>, {data: BodyType<CustomerEmailGenerateCodeIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1CustomerEmailGeneratecode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CustomerEmailGeneratecodeMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>>
    export type PostApiV1CustomerEmailGeneratecodeMutationBody = BodyType<CustomerEmailGenerateCodeIn>
    export type PostApiV1CustomerEmailGeneratecodeMutationError = ErrorType<Error>

    /**
 * @summary Generate Email Code
 */
export const usePostApiV1CustomerEmailGeneratecode = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>, TError,{data: BodyType<CustomerEmailGenerateCodeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1CustomerEmailGeneratecode>>,
        TError,
        {data: BodyType<CustomerEmailGenerateCodeIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1CustomerEmailGeneratecodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Activate Email
 */
export const PostApiV1CustomerEmailActivate = (
    customerEmailActivateIn: BodyType<CustomerEmailActivateIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerEmailActivateOut>(
      {url: `/api/v1/customer/email/activate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerEmailActivateIn
    },
      options);
    }
  


export const getPostApiV1CustomerEmailActivateMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>, TError,{data: BodyType<CustomerEmailActivateIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>, TError,{data: BodyType<CustomerEmailActivateIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>, {data: BodyType<CustomerEmailActivateIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1CustomerEmailActivate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CustomerEmailActivateMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>>
    export type PostApiV1CustomerEmailActivateMutationBody = BodyType<CustomerEmailActivateIn>
    export type PostApiV1CustomerEmailActivateMutationError = ErrorType<Error>

    /**
 * @summary Activate Email
 */
export const usePostApiV1CustomerEmailActivate = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>, TError,{data: BodyType<CustomerEmailActivateIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1CustomerEmailActivate>>,
        TError,
        {data: BodyType<CustomerEmailActivateIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1CustomerEmailActivateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Generate Code
 */
export const PostApiV1CustomerGeneratecode = (
    customerGenerateCodeIn: BodyType<CustomerGenerateCodeIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerGenerateCodeOut>(
      {url: `/api/v1/customer/generate_code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerGenerateCodeIn
    },
      options);
    }
  


export const getPostApiV1CustomerGeneratecodeMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>, TError,{data: BodyType<CustomerGenerateCodeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>, TError,{data: BodyType<CustomerGenerateCodeIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>, {data: BodyType<CustomerGenerateCodeIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1CustomerGeneratecode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CustomerGeneratecodeMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>>
    export type PostApiV1CustomerGeneratecodeMutationBody = BodyType<CustomerGenerateCodeIn>
    export type PostApiV1CustomerGeneratecodeMutationError = ErrorType<Error>

    /**
 * @summary Generate Code
 */
export const usePostApiV1CustomerGeneratecode = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>, TError,{data: BodyType<CustomerGenerateCodeIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1CustomerGeneratecode>>,
        TError,
        {data: BodyType<CustomerGenerateCodeIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1CustomerGeneratecodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Activate
 */
export const PostApiV1CustomerActivate = (
    customerActivateIn: BodyType<CustomerActivateIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerActivateOut>(
      {url: `/api/v1/customer/activate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customerActivateIn
    },
      options);
    }
  


export const getPostApiV1CustomerActivateMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerActivate>>, TError,{data: BodyType<CustomerActivateIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerActivate>>, TError,{data: BodyType<CustomerActivateIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1CustomerActivate>>, {data: BodyType<CustomerActivateIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1CustomerActivate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1CustomerActivateMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1CustomerActivate>>>
    export type PostApiV1CustomerActivateMutationBody = BodyType<CustomerActivateIn>
    export type PostApiV1CustomerActivateMutationError = ErrorType<Error>

    /**
 * @summary Activate
 */
export const usePostApiV1CustomerActivate = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1CustomerActivate>>, TError,{data: BodyType<CustomerActivateIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1CustomerActivate>>,
        TError,
        {data: BodyType<CustomerActivateIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1CustomerActivateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update Profile
 */
export const PutApiV1CustomerProfile = (
    customerUpdateProfileIn: BodyType<CustomerUpdateProfileIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerOut>(
      {url: `/api/v1/customer/profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: customerUpdateProfileIn
    },
      options);
    }
  


export const getPutApiV1CustomerProfileMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1CustomerProfile>>, TError,{data: BodyType<CustomerUpdateProfileIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1CustomerProfile>>, TError,{data: BodyType<CustomerUpdateProfileIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1CustomerProfile>>, {data: BodyType<CustomerUpdateProfileIn>}> = (props) => {
          const {data} = props ?? {};

          return  PutApiV1CustomerProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1CustomerProfileMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1CustomerProfile>>>
    export type PutApiV1CustomerProfileMutationBody = BodyType<CustomerUpdateProfileIn>
    export type PutApiV1CustomerProfileMutationError = ErrorType<Error>

    /**
 * @summary Update Profile
 */
export const usePutApiV1CustomerProfile = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1CustomerProfile>>, TError,{data: BodyType<CustomerUpdateProfileIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1CustomerProfile>>,
        TError,
        {data: BodyType<CustomerUpdateProfileIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1CustomerProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Profile
 */
export const GetApiV1CustomerProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerOut>(
      {url: `/api/v1/customer/profile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1CustomerProfileQueryKey = () => {
    return [`/api/v1/customer/profile`] as const;
    }

    
export const getGetApiV1CustomerProfileQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1CustomerProfile>>, TError = ErrorType<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CustomerProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1CustomerProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1CustomerProfile>>> = ({ signal }) => GetApiV1CustomerProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CustomerProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1CustomerProfileQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1CustomerProfile>>>
export type GetApiV1CustomerProfileQueryError = ErrorType<Error>

/**
 * @summary Get Profile
 */
export const useGetApiV1CustomerProfile = <TData = Awaited<ReturnType<typeof GetApiV1CustomerProfile>>, TError = ErrorType<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1CustomerProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1CustomerProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Unregister
 */
export const DeleteApiV1CustomerUnregister = (
    params: DeleteApiV1CustomerUnregisterParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerDeleteOut>(
      {url: `/api/v1/customer/unregister`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiV1CustomerUnregisterMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>, TError,{params: DeleteApiV1CustomerUnregisterParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>, TError,{params: DeleteApiV1CustomerUnregisterParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>, {params: DeleteApiV1CustomerUnregisterParams}> = (props) => {
          const {params} = props ?? {};

          return  DeleteApiV1CustomerUnregister(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CustomerUnregisterMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>>
    
    export type DeleteApiV1CustomerUnregisterMutationError = ErrorType<Error>

    /**
 * @summary Unregister
 */
export const useDeleteApiV1CustomerUnregister = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>, TError,{params: DeleteApiV1CustomerUnregisterParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1CustomerUnregister>>,
        TError,
        {params: DeleteApiV1CustomerUnregisterParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CustomerUnregisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Unregister By Token
 */
export const DeleteApiV1CustomerUnregisterBytoken = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CustomerDeleteOut>(
      {url: `/api/v1/customer/unregister/by_token`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1CustomerUnregisterBytokenMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>, void> = () => {
          

          return  DeleteApiV1CustomerUnregisterBytoken(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1CustomerUnregisterBytokenMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>>
    
    export type DeleteApiV1CustomerUnregisterBytokenMutationError = ErrorType<Error>

    /**
 * @summary Unregister By Token
 */
export const useDeleteApiV1CustomerUnregisterBytoken = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1CustomerUnregisterBytoken>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiV1CustomerUnregisterBytokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    