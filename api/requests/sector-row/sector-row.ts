/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Probilet API
 * A simple instruction manual for those who need the probilet api.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  GetApiV1SectorrowSectorIdPagedParams,
  PaginatedResponseSchemaSectorRowOut,
  SectorRowIn,
  SectorRowOut
} from '../../schemas'
import { customInstance } from '../../customInstance';
import type { ErrorType, BodyType } from '../../customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get By Sector Id Paged
 */
export const GetApiV1SectorrowSectorIdPaged = (
    id: number,
    params?: GetApiV1SectorrowSectorIdPagedParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedResponseSchemaSectorRowOut>(
      {url: `/api/v1/sector_row/sector/${id}/paged`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiV1SectorrowSectorIdPagedQueryKey = (id: number,
    params?: GetApiV1SectorrowSectorIdPagedParams,) => {
    return [`/api/v1/sector_row/sector/${id}/paged`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1SectorrowSectorIdPagedQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>, TError = ErrorType<Error>>(id: number,
    params?: GetApiV1SectorrowSectorIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorrowSectorIdPagedQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>> = ({ signal }) => GetApiV1SectorrowSectorIdPaged(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorrowSectorIdPagedQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>>
export type GetApiV1SectorrowSectorIdPagedQueryError = ErrorType<Error>

/**
 * @summary Get By Sector Id Paged
 */
export const useGetApiV1SectorrowSectorIdPaged = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>, TError = ErrorType<Error>>(
 id: number,
    params?: GetApiV1SectorrowSectorIdPagedParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorIdPaged>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorrowSectorIdPagedQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Sector Id
 */
export const GetApiV1SectorrowSectorId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SectorRowOut[]>(
      {url: `/api/v1/sector_row/sector/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SectorrowSectorIdQueryKey = (id: number,) => {
    return [`/api/v1/sector_row/sector/${id}`] as const;
    }

    
export const getGetApiV1SectorrowSectorIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorrowSectorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>> = ({ signal }) => GetApiV1SectorrowSectorId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorrowSectorIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>>
export type GetApiV1SectorrowSectorIdQueryError = ErrorType<Error>

/**
 * @summary Get By Sector Id
 */
export const useGetApiV1SectorrowSectorId = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowSectorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorrowSectorIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get By Id
 */
export const GetApiV1SectorrowId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SectorRowOut>(
      {url: `/api/v1/sector_row/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiV1SectorrowIdQueryKey = (id: number,) => {
    return [`/api/v1/sector_row/${id}`] as const;
    }

    
export const getGetApiV1SectorrowIdQueryOptions = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowId>>, TError = ErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1SectorrowIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetApiV1SectorrowId>>> = ({ signal }) => GetApiV1SectorrowId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1SectorrowIdQueryResult = NonNullable<Awaited<ReturnType<typeof GetApiV1SectorrowId>>>
export type GetApiV1SectorrowIdQueryError = ErrorType<Error>

/**
 * @summary Get By Id
 */
export const useGetApiV1SectorrowId = <TData = Awaited<ReturnType<typeof GetApiV1SectorrowId>>, TError = ErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof GetApiV1SectorrowId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiV1SectorrowIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const PutApiV1SectorrowId = (
    id: number,
    sectorRowIn: BodyType<SectorRowIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorRowOut>(
      {url: `/api/v1/sector_row/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sectorRowIn
    },
      options);
    }
  


export const getPutApiV1SectorrowIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorrowId>>, TError,{id: number;data: BodyType<SectorRowIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorrowId>>, TError,{id: number;data: BodyType<SectorRowIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PutApiV1SectorrowId>>, {id: number;data: BodyType<SectorRowIn>}> = (props) => {
          const {id,data} = props ?? {};

          return  PutApiV1SectorrowId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiV1SectorrowIdMutationResult = NonNullable<Awaited<ReturnType<typeof PutApiV1SectorrowId>>>
    export type PutApiV1SectorrowIdMutationBody = BodyType<SectorRowIn>
    export type PutApiV1SectorrowIdMutationError = ErrorType<Error>

    /**
 * @summary Update
 */
export const usePutApiV1SectorrowId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PutApiV1SectorrowId>>, TError,{id: number;data: BodyType<SectorRowIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PutApiV1SectorrowId>>,
        TError,
        {id: number;data: BodyType<SectorRowIn>},
        TContext
      > => {

      const mutationOptions = getPutApiV1SectorrowIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete
 */
export const DeleteApiV1SectorrowId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorRowOut>(
      {url: `/api/v1/sector_row/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiV1SectorrowIdMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  DeleteApiV1SectorrowId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiV1SectorrowIdMutationResult = NonNullable<Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>>
    
    export type DeleteApiV1SectorrowIdMutationError = ErrorType<Error>

    /**
 * @summary Delete
 */
export const useDeleteApiV1SectorrowId = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof DeleteApiV1SectorrowId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApiV1SectorrowIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create
 */
export const PostApiV1Sectorrow = (
    sectorRowIn: BodyType<SectorRowIn>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SectorRowOut>(
      {url: `/api/v1/sector_row`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sectorRowIn
    },
      options);
    }
  


export const getPostApiV1SectorrowMutationOptions = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sectorrow>>, TError,{data: BodyType<SectorRowIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sectorrow>>, TError,{data: BodyType<SectorRowIn>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof PostApiV1Sectorrow>>, {data: BodyType<SectorRowIn>}> = (props) => {
          const {data} = props ?? {};

          return  PostApiV1Sectorrow(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1SectorrowMutationResult = NonNullable<Awaited<ReturnType<typeof PostApiV1Sectorrow>>>
    export type PostApiV1SectorrowMutationBody = BodyType<SectorRowIn>
    export type PostApiV1SectorrowMutationError = ErrorType<Error>

    /**
 * @summary Create
 */
export const usePostApiV1Sectorrow = <TError = ErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof PostApiV1Sectorrow>>, TError,{data: BodyType<SectorRowIn>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof PostApiV1Sectorrow>>,
        TError,
        {data: BodyType<SectorRowIn>},
        TContext
      > => {

      const mutationOptions = getPostApiV1SectorrowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    